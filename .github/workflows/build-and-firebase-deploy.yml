name: Firebase Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code # リポジトリのコードをチェックアウト（クローン）
        uses: actions/checkout@v4
      - name: Set up Node.js # Node.js環境を整える
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Check environment variables  # 環境変数が設定されているか確認
      # -z: このオプションは、文字列が空であるかどうかを確認
      #  $ は、シェルスクリプトで変数を参照するために使用される
        run: |
          if [ -z "${{ secrets.VITE_SUPABASE_URL }}" ]; then echo "VITE_SUPABASE_URL is not set"; else echo "VITE_SUPABASE_URL is set"; fi
          if [ -z "${{ secrets.VITE_SUPABASE_ANON_KEY }}" ]; then echo "VITE_SUPABASE_ANON_KEY is not set"; else echo "VITE_SUPABASE_ANON_KEY is set"; fi
      # envで環境変数を設定
      # npm run build後に、distディレクトリが作成される(ローカルでも確認可能)
      - name: Run build
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
      # アーティファクトをダウンロードする際に使用
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          # アップロードするアーティファクトの名前を指定。この名前は、後のステップでアーティファクトをダウンロードする際に使用される
          name: build-artifacts
          # アップロードするファイルやディレクトリのパスを指定。distディレクトリ内のすべてのファイルがアーティファクトとしてアップロードされる
          path: dist

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
    # GitHubリポジトリから最新のコードをチェックアウト（クローン）する
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # cache: "npm": npmキャッシュを有効にして、依存関係のインストールを高速化
          # インストール時間の短縮、ネットワーク負荷の軽減、一貫性の向上、コスト削減
          cache: "npm"
      - name: Install firebase-tools
      # firebase-toolsがプロジェクトに追加され、開発中に使用できるようになり、Firebaseプロジェクトの管理やデプロイが簡単に行えるようになる
        run: npm install --save-dev firebase-tools
      - name: Decode Firebase service account key
      # GitHub Secretsに保存されているFIREBASE_KEYを取得し、Base64でデコードしてfirebase-key.jsonというファイルに保存
        # echo "${{ secrets.FIREBASE_KEY }}":
          # GitHub Actions のシークレットから FIREBASE_KEY の値を取得し、標準出力に表示
        # | base64 -d:
          # パイプ (|) を使って、echo コマンドの出力を base64 -d コマンドに渡し、Base64 デコード
        # > ./firebase-key.json:
          # デコードされた出力を firebase-key.json ファイルに書き込む
      # GOOGLE_APPLICATION_CREDENTIALSという環境変数を設定し、その値をfirebase-key.jsonのパスする
        # ${{ github.workspace }}:
          # GitHub Actions のコンテキスト変数
          # 現在のワークスペースディレクトリのパスを指す
          # リポジトリがチェックアウト(copy)されるディレクトリ
      # Firebase SDKがこのファイルを使用して認証を行うことができる
      # $GITHUB_ENV: GitHub Actionsが提供する特殊な環境変数で、ここに書き込まれた内容はその後のステップで環境変数として利用される
        # GitHub Actions の環境変数ファイルのパスを指す
        # ジョブの実行中に環境変数を設定するために使用される
        run: |
          echo "${{ secrets.FIREBASE_KEY }}" | base64 -d > ./firebase-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/firebase-key.json" >> $GITHUB_ENV
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist
      # firebase useコマンドを実行して、指定されたFirebaseプロジェクトを使用するように設定
      # ./node_modules/.bin/firebaseは、プロジェクト内にインストールされたFirebase CLIを実行するためのパス
      - name: change space
        run: ./node_modules/.bin/firebase use ${{ secrets.FIREBASE_PROJECT_ID }}
      - name: Deploy to Firebase Hosting
        run: |
          ./node_modules/.bin/firebase deploy
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_CLI_EXPERIMENTS: webframeworks
      - name: delete GOOGLE_APPLICATION_CREDENTIALS
        run: rm $GOOGLE_APPLICATION_CREDENTIALS
        # GitHub Actionsのワークフロー内で特定のステップやジョブを常に実行するための条件
        # 前のステップやジョブが成功したかどうかに関係なく、そのステップやジョブが必ず実行される
        if: ${{ always() }}



